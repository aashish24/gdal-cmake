dnl Process this file with autoconf to produce a configure script.
AC_INIT(GDALmake.opt.in)
AC_CONFIG_HEADER(port/cpl_config.h)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX

dnl We always want to check /usr/local for stuff.
LIBS="$LIBS -L/usr/local/lib"
CFLAGS="$CFLAGS -I/usr/local/include"
CPPFLAGS="$CPPFLAGS -I/usr/local/include"

dnl Checks for libraries.
AC_CHECK_LIB(dl,dlopen,,,)
AC_CHECK_LIB(dbmalloc,malloc_chain_check,,,)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h unistd.h dbmalloc.h dlfcn.h)

dnl Checks for library functions.
AC_C_BIGENDIAN
AC_FUNC_VPRINTF
AC_CHECK_FUNC(vsnprintf, AC_DEFINE(HAVE_VSNPRINTF))

OPT_GDAL_FORMATS=
EXTRA_INCLUDES=

dnl ---------------------------------------------------------------------------
dnl Check if libz is available.
dnl ---------------------------------------------------------------------------

AC_ARG_WITH(libz,[  --with-libz[=ARG]       Include libz support (ARG=internal or link argument)],,)

if test "$with_libz" = "external" -o "$with_libz" = "" ; then

  AC_CHECK_LIB(z,deflateInit_,LIBZ_SETTING=external,LIBZ_SETTING=internal,)

  if test "$LIBZ_SETTING" = "external" ; then   
    LIBS="-lz $LIBS"
  else
    echo "Using internal libz implementation."
  fi

elif test "$with_libz" = "internal" ; then
  LIBZ_SETTING=internal
  echo "Using internal libz implementation."

else

  LIBZ_SETTING=external
  LIBS="$with_libz $LIBS"

  echo "using $with_libz for libz."
fi

AC_SUBST(LIBZ_SETTING,$LIBZ_SETTING)

if test "$LIBZ_SETTING" = "internal" ; then
  OPT_GDAL_FORMATS="zlib $OPT_GDAL_FORMATS"
fi

dnl ---------------------------------------------------------------------------
dnl Check if GRASS library is available.
dnl ---------------------------------------------------------------------------

AC_ARG_WITH(grass,[  --with-grass[=ARG]      Include GRASS support (ARG=no or libgrass path)],,)

if test "$with_grass" = "no" ; then

  GRASS_SETTING=no

  echo "GRASS support disabled."

elif test "$with_grass" = "yes" -o "$with_grass" = "" ; then

  AC_CHECK_LIB(grass5,G_gisinit_2,GRASS_SETTING=external,GRASS_SETTING=no,)

  if test "$GRASS_SETTING" = "external" ; then   
    LIBS="-lgrass5 $LIBS"
  fi

else

  GRASS_SETTING=external
  LIBS="-L$with_grass -L$with_grass/lib -lgrass5 $LIBS"
  EXTRA_INCLUDES="-I$with_grass -I$with_grass/include $EXTRA_INCLUDES"

  echo "using libgrass from $with_grass."
fi

AC_SUBST(GRASS_SETTING,$GRASS_SETTING)

if test "$GRASS_SETTING" != "no" ; then
  OPT_GDAL_FORMATS="grass $OPT_GDAL_FORMATS"
fi

dnl ---------------------------------------------------------------------------
dnl Select a PNG Library to use, or disable driver.
dnl ---------------------------------------------------------------------------

AC_ARG_WITH(png,[  --with-png[=ARG]        Include PNG support (ARG=internal, no or path)],,)

if test "$with_png" = "no" ; then

  PNG_SETTING=no

  echo "png support disabled."

elif test "$with_png" = "yes" -o "$with_png" = "" ; then

  AC_CHECK_LIB(png,png_create_read_struct,PNG_SETTING=external,PNG_SETTING=internal,$LIBS)

  if test "$PNG_SETTING" = "external" ; then   
    LIBS="-lpng $LIBS"
    echo "using pre-installed libpng."
  else
    echo "using internal png code."
  fi

elif test "$with_png" = "internal" ; then

  PNG_SETTING=internal

  echo "using internal png code."

else

  PNG_SETTING=external
  LIBS="-L$with_png -L$with_png/lib -lpng $LIBS"
  EXTRA_INCLUDES="-I$with_png -I$with_png/include $EXTRA_INCLUDES"

  echo "using libpng from $with_png."

fi

AC_SUBST(PNG_SETTING,$PNG_SETTING)

if test "$PNG_SETTING" != "no" ; then
  OPT_GDAL_FORMATS="png $OPT_GDAL_FORMATS"
fi

dnl ---------------------------------------------------------------------------
dnl Select a JPEG Library to use, or disable driver.
dnl ---------------------------------------------------------------------------

AC_ARG_WITH(jpeg,[  --with-jpeg[=ARG]       Include JPEG support (ARG=internal, no or path)],,)

if test "$with_jpeg" = "no" ; then

  JPEG_SETTING=no

  echo "jpeg support disabled."

elif test "$with_jpeg" = "yes" -o "$with_jpeg" = "" ; then

  AC_CHECK_LIB(jpeg,jpeg_read_scanlines,JPEG_SETTING=external,JPEG_SETTING=internal,)

  if test "$JPEG_SETTING" = "external" ; then   
    LIBS="-ljpeg $LIBS"
    echo "using pre-installed libjpeg."
  else
    echo "using internal jpeg code."
  fi

elif test "$with_jpeg" = "internal" ; then

  JPEG_SETTING=internal

  echo "using internal jpeg code."

else

  JPEG_SETTING=external
  LIBS="-L$with_jpeg -L$with_jpeg/lib -ljpeg $LIBS"
  EXTRA_INCLUDES="-I$with_jpeg -I$with_jpeg/include $EXTRA_INCLUDES"

  echo "using libjpeg from $with_jpeg."

fi

AC_SUBST(JPEG_SETTING,$JPEG_SETTING)

if test "$JPEG_SETTING" != "no" ; then
  OPT_GDAL_FORMATS="jpeg $OPT_GDAL_FORMATS"
fi

dnl ---------------------------------------------------------------------------
dnl Select a libtiff library to use.
dnl ---------------------------------------------------------------------------

AC_ARG_WITH(libtiff,[  --with-libtiff=ARG         Libtiff library to use (ARG=internal, yes or path)],,)

if test "$with_libtiff" = "yes" -o "$with_libtiff" = "" ; then

  AC_CHECK_LIB(tiff,TIFFReadRGBATile,TIFF_SETTING=external,TIFF_SETTING=internal,)

  if test "$TIFF_SETTING" = "external" ; then   
    LIBS="-ltiff $LIBS"
    echo "using pre-installed libtiff."
  else
    echo "using internal TIFF code."
  fi

elif test "$with_libtiff" = "internal" ; then

  TIFF_SETTING=internal

  echo "using internal TIFF code."

else

  TIFF_SETTING=external
  LIBS="-L$with_libtiff -L$with_libtiff/lib -ltiff $LIBS"
  EXTRA_INCLUDES="-I$with_libtiff -I$with_libtiff/include $EXTRA_INCLUDES"

  echo "using libtiff from $with_libtiff."
fi

AC_SUBST(TIFF_SETTING,$TIFF_SETTING)

dnl ---------------------------------------------------------------------------

AC_SUBST(OPT_GDAL_FORMATS,$OPT_GDAL_FORMATS)
AC_SUBST(EXTRA_INCLUDES,$EXTRA_INCLUDES)

dnl ---------------------------------------------------------------------------

INST_PREFIX=/usr/local
INST_INCLUDE=$INST_PREFIX/include
INST_LIB=$INST_PREFIX/lib
INST_BIN=$INST_PREFIX/bin
INST_DATA=$INST_PREFIX/share/gdal

AC_SUBST(INST_PREFIX,$INST_PREFIX)
AC_SUBST(INST_INCLUDE,$INST_INCLUDE)
AC_SUBST(INST_LIB,$INST_LIB)
AC_SUBST(INST_BIN,$INST_BIN)
AC_SUBST(INST_DATA,$INST_DATA)

dnl ---------------------------------------------------------------------------
AC_ARG_WITH(ogr,[  --with-ogr              Build OGR into shared library],,)

if test "$with_ogr" = yes ; then
  echo checking for OGR ... enabled by user
  OGR_ENABLED=yes
else
  echo checking for OGR ... not requested by user
  OGR_ENABLED=no
fi
AC_SUBST(OGR_ENABLED,$OGR_ENABLED)

dnl ---------------------------------------------------------------------------

AC_COMPILER_WFLAGS
AC_COMPILER_PIC
AC_LD_SHARED

dnl ---------------------------------------------------------------------------
dnl Python Checks
dnl ---------------------------------------------------------------------------

AC_ARG_WITH(python,[  --without-python        Disable Python],,)

AM_PATH_PYTHON
AM_INIT_PYEXEC_MOD
AM_CHECK_NUMPY

AC_TRY_OGDI

AC_OUTPUT(GDALmake.opt)
