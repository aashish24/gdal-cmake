/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OGR {

using System;

public class Geometry : IDisposable {
  private IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal Geometry(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static IntPtr getCPtr(Geometry obj) {
    return (obj == null) ? IntPtr.Zero : obj.swigCPtr;
  }

  protected Geometry() : this(IntPtr.Zero, false) {
  }

  public virtual void Dispose() {
    if(swigCPtr != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      throw new MethodAccessException("C++ destructor does not have public access");
    }
    swigCPtr = IntPtr.Zero;
    GC.SuppressFinalize(this);
  }

  public Geometry(int type, string wkt, int wkb, string wkb_buf, string gml) : this(ogrPINVOKE.new_Geometry(type, wkt, wkb, wkb_buf, gml), true) {
  }

  public string ExportToWkt() {
    return ogrPINVOKE.Geometry_ExportToWkt(swigCPtr);
  }

  public int ExportToWkb(int byte_order) {
    return ogrPINVOKE.Geometry_ExportToWkb(swigCPtr, byte_order);
  }

  public string ExportToGML() {
    return ogrPINVOKE.Geometry_ExportToGML(swigCPtr);
  }

  public void AddPoint(double x, double y, double z) {
    ogrPINVOKE.Geometry_AddPoint(swigCPtr, x, y, z);
  }

  public int AddGeometryDirectly(Geometry other) {
    return ogrPINVOKE.Geometry_AddGeometryDirectly(swigCPtr, Geometry.getCPtr(other));
  }

  public int AddGeometry(Geometry other) {
    return ogrPINVOKE.Geometry_AddGeometry(swigCPtr, Geometry.getCPtr(other));
  }

  public Geometry Clone() {
    IntPtr cPtr = ogrPINVOKE.Geometry_Clone(swigCPtr);
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public void Destroy() {
    ogrPINVOKE.Geometry_Destroy(swigCPtr);
  }

  public int GetGeometryType() {
    return ogrPINVOKE.Geometry_GetGeometryType(swigCPtr);
  }

  public string GetGeometryName() {
    return ogrPINVOKE.Geometry_GetGeometryName(swigCPtr);
  }

  public double GetArea() {
    return ogrPINVOKE.Geometry_GetArea(swigCPtr);
  }

  public int GetPointCount() {
    return ogrPINVOKE.Geometry_GetPointCount(swigCPtr);
  }

  public double GetX(int point) {
    return ogrPINVOKE.Geometry_GetX(swigCPtr, point);
  }

  public double GetY(int point) {
    return ogrPINVOKE.Geometry_GetY(swigCPtr, point);
  }

  public double GetZ(int point) {
    return ogrPINVOKE.Geometry_GetZ(swigCPtr, point);
  }

  public int GetGeometryCount() {
    return ogrPINVOKE.Geometry_GetGeometryCount(swigCPtr);
  }

  public void SetPoint(int point, double x, double y, double z) {
    ogrPINVOKE.Geometry_SetPoint(swigCPtr, point, x, y, z);
  }

  public Geometry GetGeometryRef(int geom) {
    IntPtr cPtr = ogrPINVOKE.Geometry_GetGeometryRef(swigCPtr, geom);
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public Geometry GetBoundary() {
    IntPtr cPtr = ogrPINVOKE.Geometry_GetBoundary(swigCPtr);
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public Geometry ConvexHull() {
    IntPtr cPtr = ogrPINVOKE.Geometry_ConvexHull(swigCPtr);
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public Geometry Buffer(double distance, int quadsecs) {
    IntPtr cPtr = ogrPINVOKE.Geometry_Buffer(swigCPtr, distance, quadsecs);
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public Geometry Intersection(Geometry other) {
    IntPtr cPtr = ogrPINVOKE.Geometry_Intersection(swigCPtr, Geometry.getCPtr(other));
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public Geometry Union(Geometry other) {
    IntPtr cPtr = ogrPINVOKE.Geometry_Union(swigCPtr, Geometry.getCPtr(other));
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public Geometry Difference(Geometry other) {
    IntPtr cPtr = ogrPINVOKE.Geometry_Difference(swigCPtr, Geometry.getCPtr(other));
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public Geometry SymmetricDifference(Geometry other) {
    IntPtr cPtr = ogrPINVOKE.Geometry_SymmetricDifference(swigCPtr, Geometry.getCPtr(other));
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public double Distance(Geometry other) {
    return ogrPINVOKE.Geometry_Distance(swigCPtr, Geometry.getCPtr(other));
  }

  public void Empty() {
    ogrPINVOKE.Geometry_Empty(swigCPtr);
  }

  public int Intersect(Geometry other) {
    return ogrPINVOKE.Geometry_Intersect(swigCPtr, Geometry.getCPtr(other));
  }

  public int Equal(Geometry other) {
    return ogrPINVOKE.Geometry_Equal(swigCPtr, Geometry.getCPtr(other));
  }

  public int Disjoint(Geometry other) {
    return ogrPINVOKE.Geometry_Disjoint(swigCPtr, Geometry.getCPtr(other));
  }

  public int Touches(Geometry other) {
    return ogrPINVOKE.Geometry_Touches(swigCPtr, Geometry.getCPtr(other));
  }

  public int Crosses(Geometry other) {
    return ogrPINVOKE.Geometry_Crosses(swigCPtr, Geometry.getCPtr(other));
  }

  public int Within(Geometry other) {
    return ogrPINVOKE.Geometry_Within(swigCPtr, Geometry.getCPtr(other));
  }

  public int Contains(Geometry other) {
    return ogrPINVOKE.Geometry_Contains(swigCPtr, Geometry.getCPtr(other));
  }

  public int Overlaps(Geometry other) {
    return ogrPINVOKE.Geometry_Overlaps(swigCPtr, Geometry.getCPtr(other));
  }

  public int TransformTo(SWIGTYPE_p_OSRSpatialReferenceShadow reference) {
    return ogrPINVOKE.Geometry_TransformTo(swigCPtr, SWIGTYPE_p_OSRSpatialReferenceShadow.getCPtr(reference));
  }

  public int Transform(SWIGTYPE_p_OSRCoordinateTransformationShadow trans) {
    return ogrPINVOKE.Geometry_Transform(swigCPtr, SWIGTYPE_p_OSRCoordinateTransformationShadow.getCPtr(trans));
  }

  public SWIGTYPE_p_OSRSpatialReferenceShadow GetSpatialReference() {
    IntPtr cPtr = ogrPINVOKE.Geometry_GetSpatialReference(swigCPtr);
    return (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_OSRSpatialReferenceShadow(cPtr, false);
  }

  public void AssignSpatialReference(SWIGTYPE_p_OSRSpatialReferenceShadow reference) {
    ogrPINVOKE.Geometry_AssignSpatialReference(swigCPtr, SWIGTYPE_p_OSRSpatialReferenceShadow.getCPtr(reference));
  }

  public void CloseRings() {
    ogrPINVOKE.Geometry_CloseRings(swigCPtr);
  }

  public void FlattenTo2D() {
    ogrPINVOKE.Geometry_FlattenTo2D(swigCPtr);
  }

  public void GetEnvelope(SWIGTYPE_p_double_4 argout) {
    ogrPINVOKE.Geometry_GetEnvelope(swigCPtr, SWIGTYPE_p_double_4.getCPtr(argout));
  }

  public Geometry Centroid() {
    IntPtr cPtr = ogrPINVOKE.Geometry_Centroid(swigCPtr);
    return (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, true);
  }

  public int WkbSize() {
    return ogrPINVOKE.Geometry_WkbSize(swigCPtr);
  }

  public int GetCoordinateDimension() {
    return ogrPINVOKE.Geometry_GetCoordinateDimension(swigCPtr);
  }

  public int GetDimension() {
    return ogrPINVOKE.Geometry_GetDimension(swigCPtr);
  }

}

}
