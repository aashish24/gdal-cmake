/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GDAL {

using System;

public class Band : IDisposable {
  private IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal Band(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static IntPtr getCPtr(Band obj) {
    return (obj == null) ? IntPtr.Zero : obj.swigCPtr;
  }

  protected Band() : this(IntPtr.Zero, false) {
  }

  public virtual void Dispose() {
    if(swigCPtr != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      throw new MethodAccessException("C++ destructor does not have public access");
    }
    swigCPtr = IntPtr.Zero;
    GC.SuppressFinalize(this);
  }

  public int XSize {
    get {
      return gdalPINVOKE.get_Band_XSize(swigCPtr);
    } 
  }

  public int YSize {
    get {
      return gdalPINVOKE.get_Band_YSize(swigCPtr);
    } 
  }

  public int DataType {
    get {
      return gdalPINVOKE.get_Band_DataType(swigCPtr);
    } 
  }

  public SWIGTYPE_p_p_char GetMetadata(string pszDomain) {
    IntPtr cPtr = gdalPINVOKE.Band_GetMetadata(swigCPtr, pszDomain);
    return (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
  }

  public int SetMetadata(SWIGTYPE_p_p_char papszMetadata, string pszDomain) {
    return gdalPINVOKE.Band_SetMetadata(swigCPtr, SWIGTYPE_p_p_char.getCPtr(papszMetadata), pszDomain);
  }

  public int GetRasterColorInterpretation() {
    return gdalPINVOKE.Band_GetRasterColorInterpretation(swigCPtr);
  }

  public int SetRasterColorInterpretation(int val) {
    return gdalPINVOKE.Band_SetRasterColorInterpretation(swigCPtr, val);
  }

  public double GetNoDataValue() {
    return gdalPINVOKE.Band_GetNoDataValue(swigCPtr);
  }

  public int SetNoDataValue(double d) {
    return gdalPINVOKE.Band_SetNoDataValue(swigCPtr, d);
  }

  public double GetMinimum() {
    return gdalPINVOKE.Band_GetMinimum(swigCPtr);
  }

  public double GetMaximum() {
    return gdalPINVOKE.Band_GetMaximum(swigCPtr);
  }

  public double GetOffset() {
    return gdalPINVOKE.Band_GetOffset(swigCPtr);
  }

  public double GetScale() {
    return gdalPINVOKE.Band_GetScale(swigCPtr);
  }

  public int GetOverviewCount() {
    return gdalPINVOKE.Band_GetOverviewCount(swigCPtr);
  }

  public Band GetOverview(int i) {
    IntPtr cPtr = gdalPINVOKE.Band_GetOverview(swigCPtr, i);
    return (cPtr == IntPtr.Zero) ? null : new Band(cPtr, false);
  }

  public int Checksum(int xoff, int yoff, int xsize, int ysize) {
    return gdalPINVOKE.Band_Checksum__SWIG_0(swigCPtr, xoff, yoff, xsize, ysize);
  }

  public int Checksum(int xoff, int yoff) {
    return gdalPINVOKE.Band_Checksum__SWIG_1(swigCPtr, xoff, yoff);
  }

  public void ComputeRasterMinMax(SWIGTYPE_p_double_2 argout, int approx_ok) {
    gdalPINVOKE.Band_ComputeRasterMinMax(swigCPtr, SWIGTYPE_p_double_2.getCPtr(argout), approx_ok);
  }

  public int Fill(double real_fill, double imag_fill) {
    return gdalPINVOKE.Band_Fill(swigCPtr, real_fill, imag_fill);
  }

  public int ReadRaster(int xoff, int yoff, int xsize, int ysize, SWIGTYPE_p_int buf_xsize, SWIGTYPE_p_int buf_ysize, SWIGTYPE_p_int buf_type) {
    return gdalPINVOKE.Band_ReadRaster(swigCPtr, xoff, yoff, xsize, ysize, SWIGTYPE_p_int.getCPtr(buf_xsize), SWIGTYPE_p_int.getCPtr(buf_ysize), SWIGTYPE_p_int.getCPtr(buf_type));
  }

  public int WriteRaster(int xoff, int yoff, int xsize, int ysize, int buf_len, SWIGTYPE_p_int buf_xsize, SWIGTYPE_p_int buf_ysize, SWIGTYPE_p_int buf_type) {
    return gdalPINVOKE.Band_WriteRaster(swigCPtr, xoff, yoff, xsize, ysize, buf_len, SWIGTYPE_p_int.getCPtr(buf_xsize), SWIGTYPE_p_int.getCPtr(buf_ysize), SWIGTYPE_p_int.getCPtr(buf_type));
  }

  public void FlushCache() {
    gdalPINVOKE.Band_FlushCache(swigCPtr);
  }

  public ColorTable GetRasterColorTable() {
    IntPtr cPtr = gdalPINVOKE.Band_GetRasterColorTable(swigCPtr);
    return (cPtr == IntPtr.Zero) ? null : new ColorTable(cPtr, true);
  }

  public int SetRasterColorTable(ColorTable arg) {
    return gdalPINVOKE.Band_SetRasterColorTable(swigCPtr, ColorTable.getCPtr(arg));
  }

}

}
