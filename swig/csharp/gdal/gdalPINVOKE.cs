/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GDAL {

using System;
using System.Runtime.InteropServices;

class gdalPINVOKE {

  class SWIGExceptionHelper {

    public delegate void SWIGExceptionDelegate(string message);

    static SWIGExceptionDelegate systemDelegate = new SWIGExceptionDelegate(ThrowSystemException);
    static SWIGExceptionDelegate outOfMemoryDelegate = new SWIGExceptionDelegate(ThrowOutOfMemoryException);
    static SWIGExceptionDelegate indexOutOfRangeDelegate = new SWIGExceptionDelegate(ThrowIndexOutOfRangeException);
    static SWIGExceptionDelegate divideByZeroDelegate = new SWIGExceptionDelegate(ThrowDivideByZeroException);
    static SWIGExceptionDelegate argumentOutOfRangeDelegate = new SWIGExceptionDelegate(ThrowArgumentOutOfRangeException);
    static SWIGExceptionDelegate nullReferenceDelegate = new SWIGExceptionDelegate(ThrowNullReferenceException);

    [DllImport("gdal", EntryPoint="SWIGRegisterExceptionCallbacks_gdal")]
    public static extern void SWIGRegisterExceptionCallbacks_gdal(
      SWIGExceptionDelegate systemExceptionDelegate,
      SWIGExceptionDelegate outOfMemoryDelegate, 
      SWIGExceptionDelegate indexOutOfRangeDelegate, 
      SWIGExceptionDelegate divideByZeroDelegate, 
      SWIGExceptionDelegate argumentOutOfRangeDelegate,
      SWIGExceptionDelegate nullReferenceDelegate);

    static void ThrowSystemException(string message) {
      throw new System.SystemException(message);
    }

    static void ThrowOutOfMemoryException(string message) {
      throw new System.OutOfMemoryException(message);
    }

    static void ThrowIndexOutOfRangeException(string message) {
      throw new System.IndexOutOfRangeException(message);
    }

    static void ThrowDivideByZeroException(string message) {
      throw new System.DivideByZeroException(message);
    }

    static void ThrowArgumentOutOfRangeException(string message) {
      throw new System.ArgumentOutOfRangeException(message);
    }

    static void ThrowNullReferenceException(string message) {
      throw new System.NullReferenceException(message);
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_gdal(systemDelegate, outOfMemoryDelegate, indexOutOfRangeDelegate, divideByZeroDelegate, argumentOutOfRangeDelegate, nullReferenceDelegate);
    }
  }

  static SWIGExceptionHelper exceptionHelper = new SWIGExceptionHelper();


  class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("gdal", EntryPoint="SWIGRegisterStringCallback_gdal")]
    public static extern void SWIGRegisterStringCallback_gdal(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_gdal(stringDelegate);
    }
  }

  static SWIGStringHelper stringHelper = new SWIGStringHelper();


  [DllImport("gdal", EntryPoint="CSharp_Debug")]
  public static extern void Debug(string jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Error")]
  public static extern void Error(int jarg1, int jarg2, string jarg3);

  [DllImport("gdal", EntryPoint="CSharp_PushErrorHandler__SWIG_0")]
  public static extern int PushErrorHandler__SWIG_0(string jarg1);

  [DllImport("gdal", EntryPoint="CSharp_PushErrorHandler__SWIG_1")]
  public static extern void PushErrorHandler__SWIG_1(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_PopErrorHandler")]
  public static extern void PopErrorHandler();

  [DllImport("gdal", EntryPoint="CSharp_ErrorReset")]
  public static extern void ErrorReset();

  [DllImport("gdal", EntryPoint="CSharp_GetLastErrorNo")]
  public static extern int GetLastErrorNo();

  [DllImport("gdal", EntryPoint="CSharp_GetLastErrorType")]
  public static extern int GetLastErrorType();

  [DllImport("gdal", EntryPoint="CSharp_GetLastErrorMsg")]
  public static extern string GetLastErrorMsg();

  [DllImport("gdal", EntryPoint="CSharp_PushFinderLocation")]
  public static extern void PushFinderLocation(string jarg1);

  [DllImport("gdal", EntryPoint="CSharp_PopFinderLocation")]
  public static extern void PopFinderLocation();

  [DllImport("gdal", EntryPoint="CSharp_FinderClean")]
  public static extern void FinderClean();

  [DllImport("gdal", EntryPoint="CSharp_FindFile")]
  public static extern string FindFile(string jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_SetConfigOption")]
  public static extern void SetConfigOption(string jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GetConfigOption")]
  public static extern string GetConfigOption(string jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_Driver_ShortName")]
  public static extern string get_Driver_ShortName(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Driver_LongName")]
  public static extern string get_Driver_LongName(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Driver_HelpTopic")]
  public static extern string get_Driver_HelpTopic(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Driver_Create")]
  public static extern IntPtr Driver_Create(IntPtr jarg1, string jarg2, int jarg3, int jarg4, int jarg5, int jarg6, IntPtr jarg7);

  [DllImport("gdal", EntryPoint="CSharp_Driver_CreateCopy")]
  public static extern IntPtr Driver_CreateCopy(IntPtr jarg1, string jarg2, IntPtr jarg3, int jarg4, IntPtr jarg5);

  [DllImport("gdal", EntryPoint="CSharp_Driver_Delete")]
  public static extern int Driver_Delete(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Driver_GetMetadata")]
  public static extern IntPtr Driver_GetMetadata(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPX")]
  public static extern void set_GCP_GCPX(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPX")]
  public static extern double get_GCP_GCPX(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPY")]
  public static extern void set_GCP_GCPY(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPY")]
  public static extern double get_GCP_GCPY(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPZ")]
  public static extern void set_GCP_GCPZ(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPZ")]
  public static extern double get_GCP_GCPZ(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPPixel")]
  public static extern void set_GCP_GCPPixel(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPPixel")]
  public static extern double get_GCP_GCPPixel(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPLine")]
  public static extern void set_GCP_GCPLine(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPLine")]
  public static extern double get_GCP_GCPLine(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_Info")]
  public static extern void set_GCP_Info(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_Info")]
  public static extern string get_GCP_Info(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_Id")]
  public static extern void set_GCP_Id(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_Id")]
  public static extern string get_GCP_Id(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_new_GCP")]
  public static extern IntPtr new_GCP(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, string jarg6, string jarg7);

  [DllImport("gdal", EntryPoint="CSharp_delete_GCP")]
  public static extern void delete_GCP(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPX_get")]
  public static extern double GDAL_GCP_GCPX_get(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPX_set")]
  public static extern void GDAL_GCP_GCPX_set(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPY_get")]
  public static extern double GDAL_GCP_GCPY_get(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPY_set")]
  public static extern void GDAL_GCP_GCPY_set(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPZ_get")]
  public static extern double GDAL_GCP_GCPZ_get(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPZ_set")]
  public static extern void GDAL_GCP_GCPZ_set(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPPixel_get")]
  public static extern double GDAL_GCP_GCPPixel_get(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPPixel_set")]
  public static extern void GDAL_GCP_GCPPixel_set(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPLine_get")]
  public static extern double GDAL_GCP_GCPLine_get(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPLine_set")]
  public static extern void GDAL_GCP_GCPLine_set(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_Info_get")]
  public static extern string GDAL_GCP_Info_get(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_Info_set")]
  public static extern void GDAL_GCP_Info_set(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_Id_get")]
  public static extern string GDAL_GCP_Id_get(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_Id_set")]
  public static extern void GDAL_GCP_Id_set(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPX")]
  public static extern double GDAL_GCP_get_GCPX(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPX")]
  public static extern void GDAL_GCP_set_GCPX(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPY")]
  public static extern double GDAL_GCP_get_GCPY(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPY")]
  public static extern void GDAL_GCP_set_GCPY(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPZ")]
  public static extern double GDAL_GCP_get_GCPZ(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPZ")]
  public static extern void GDAL_GCP_set_GCPZ(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPPixel")]
  public static extern double GDAL_GCP_get_GCPPixel(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPPixel")]
  public static extern void GDAL_GCP_set_GCPPixel(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPLine")]
  public static extern double GDAL_GCP_get_GCPLine(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPLine")]
  public static extern void GDAL_GCP_set_GCPLine(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_Info")]
  public static extern string GDAL_GCP_get_Info(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_Info")]
  public static extern void GDAL_GCP_set_Info(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_Id")]
  public static extern string GDAL_GCP_get_Id(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_Id")]
  public static extern void GDAL_GCP_set_Id(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GCPsToGeoTransform")]
  public static extern IntPtr GCPsToGeoTransform(int jarg1, IntPtr jarg2, IntPtr jarg3, int jarg4);

  [DllImport("gdal", EntryPoint="CSharp_get_Dataset_RasterXSize")]
  public static extern int get_Dataset_RasterXSize(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Dataset_RasterYSize")]
  public static extern int get_Dataset_RasterYSize(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Dataset_RasterCount")]
  public static extern int get_Dataset_RasterCount(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_delete_Dataset")]
  public static extern void delete_Dataset(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetDriver")]
  public static extern IntPtr Dataset_GetDriver(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetRasterBand")]
  public static extern IntPtr Dataset_GetRasterBand(IntPtr jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetProjection")]
  public static extern string Dataset_GetProjection(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetProjectionRef")]
  public static extern string Dataset_GetProjectionRef(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_SetProjection")]
  public static extern int Dataset_SetProjection(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetGeoTransform")]
  public static extern void Dataset_GetGeoTransform(IntPtr jarg1, IntPtr jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_SetGeoTransform")]
  public static extern int Dataset_SetGeoTransform(IntPtr jarg1, IntPtr jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetMetadata")]
  public static extern IntPtr Dataset_GetMetadata(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_SetMetadata")]
  public static extern int Dataset_SetMetadata(IntPtr jarg1, IntPtr jarg2, string jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_BuildOverviews")]
  public static extern int Dataset_BuildOverviews(IntPtr jarg1, string jarg2, int jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetGCPCount")]
  public static extern int Dataset_GetGCPCount(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetGCPProjection")]
  public static extern string Dataset_GetGCPProjection(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetGCPs")]
  public static extern void Dataset_GetGCPs(IntPtr jarg1, IntPtr jarg2, IntPtr jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_SetGCPs")]
  public static extern int Dataset_SetGCPs(IntPtr jarg1, int jarg2, IntPtr jarg3, string jarg4);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_FlushCache")]
  public static extern void Dataset_FlushCache(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_AddBand")]
  public static extern int Dataset_AddBand(IntPtr jarg1, int jarg2, IntPtr jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_WriteRaster")]
  public static extern int Dataset_WriteRaster(IntPtr jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, IntPtr jarg8, IntPtr jarg9, IntPtr jarg10, int jarg11);

  [DllImport("gdal", EntryPoint="CSharp_get_Band_XSize")]
  public static extern int get_Band_XSize(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Band_YSize")]
  public static extern int get_Band_YSize(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Band_DataType")]
  public static extern int get_Band_DataType(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetMetadata")]
  public static extern IntPtr Band_GetMetadata(IntPtr jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Band_SetMetadata")]
  public static extern int Band_SetMetadata(IntPtr jarg1, IntPtr jarg2, string jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetRasterColorInterpretation")]
  public static extern int Band_GetRasterColorInterpretation(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_SetRasterColorInterpretation")]
  public static extern int Band_SetRasterColorInterpretation(IntPtr jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetNoDataValue")]
  public static extern double Band_GetNoDataValue(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_SetNoDataValue")]
  public static extern int Band_SetNoDataValue(IntPtr jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetMinimum")]
  public static extern double Band_GetMinimum(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetMaximum")]
  public static extern double Band_GetMaximum(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetOffset")]
  public static extern double Band_GetOffset(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetScale")]
  public static extern double Band_GetScale(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetOverviewCount")]
  public static extern int Band_GetOverviewCount(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetOverview")]
  public static extern IntPtr Band_GetOverview(IntPtr jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Band_Checksum__SWIG_0")]
  public static extern int Band_Checksum__SWIG_0(IntPtr jarg1, int jarg2, int jarg3, int jarg4, int jarg5);

  [DllImport("gdal", EntryPoint="CSharp_Band_Checksum__SWIG_1")]
  public static extern int Band_Checksum__SWIG_1(IntPtr jarg1, int jarg2, int jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_ComputeRasterMinMax")]
  public static extern void Band_ComputeRasterMinMax(IntPtr jarg1, IntPtr jarg2, int jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_Fill")]
  public static extern int Band_Fill(IntPtr jarg1, double jarg2, double jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_ReadRaster")]
  public static extern int Band_ReadRaster(IntPtr jarg1, int jarg2, int jarg3, int jarg4, int jarg5, IntPtr jarg8, IntPtr jarg9, IntPtr jarg10);

  [DllImport("gdal", EntryPoint="CSharp_Band_WriteRaster")]
  public static extern int Band_WriteRaster(IntPtr jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, IntPtr jarg8, IntPtr jarg9, IntPtr jarg10);

  [DllImport("gdal", EntryPoint="CSharp_Band_FlushCache")]
  public static extern void Band_FlushCache(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetRasterColorTable")]
  public static extern IntPtr Band_GetRasterColorTable(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_SetRasterColorTable")]
  public static extern int Band_SetRasterColorTable(IntPtr jarg1, IntPtr jarg2);

  [DllImport("gdal", EntryPoint="CSharp_new_ColorTable")]
  public static extern IntPtr new_ColorTable(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_delete_ColorTable")]
  public static extern void delete_ColorTable(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_Clone")]
  public static extern IntPtr ColorTable_Clone(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_GetPaletteInterpretation")]
  public static extern int ColorTable_GetPaletteInterpretation(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_GetCount")]
  public static extern int ColorTable_GetCount(IntPtr jarg1);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_GetColorEntry")]
  public static extern IntPtr ColorTable_GetColorEntry(IntPtr jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_GetColorEntryAsRGB")]
  public static extern int ColorTable_GetColorEntryAsRGB(IntPtr jarg1, int jarg2, IntPtr jarg3);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_SetColorEntry")]
  public static extern void ColorTable_SetColorEntry(IntPtr jarg1, int jarg2, IntPtr jarg3);

  [DllImport("gdal", EntryPoint="CSharp_AllRegister")]
  public static extern void AllRegister();

  [DllImport("gdal", EntryPoint="CSharp_GetCacheMax")]
  public static extern int GetCacheMax();

  [DllImport("gdal", EntryPoint="CSharp_SetCacheMax")]
  public static extern void SetCacheMax(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetCacheUsed")]
  public static extern int GetCacheUsed();

  [DllImport("gdal", EntryPoint="CSharp_GetDataTypeSize")]
  public static extern int GetDataTypeSize(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_DataTypeIsComplex")]
  public static extern int DataTypeIsComplex(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetDataTypeName")]
  public static extern string GetDataTypeName(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetDataTypeByName")]
  public static extern int GetDataTypeByName(string jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetColorInterpretationName")]
  public static extern string GetColorInterpretationName(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetPaletteInterpretationName")]
  public static extern string GetPaletteInterpretationName(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_DecToDMS")]
  public static extern string DecToDMS(double jarg1, string jarg2, int jarg3);

  [DllImport("gdal", EntryPoint="CSharp_PackedDMSToDec")]
  public static extern double PackedDMSToDec(double jarg1);

  [DllImport("gdal", EntryPoint="CSharp_DecToPackedDMS")]
  public static extern double DecToPackedDMS(double jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetDriverByName")]
  public static extern IntPtr GetDriverByName(string jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Open")]
  public static extern IntPtr Open(string jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_OpenShared")]
  public static extern IntPtr OpenShared(string jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_AutoCreateWarpedVRT")]
  public static extern IntPtr AutoCreateWarpedVRT(IntPtr jarg1, string jarg2, string jarg3, int jarg4, double jarg5);
}

}
