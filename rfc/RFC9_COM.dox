/*!
\page refc_com RFC 9: ATL Based COM Interface

Author: Ivan Lucena<br>
Contact: ivan@ilucena.net<br>
Status: Proposed<br>

\section summary Summary

It is proposed to include a COM Interface to GDAL by adding a source 
tree containing the Microsoft Visual Studio solution and its related 
projects and C++ code. 

The goal is to provide a GDAL interface for programming languages 
that support Component Object Model (COM).

Sub-folders with examples of use, test suit and documentation will
be included under the same source tree. 

\section details Details

<ol>

<li> The solution is based on Active Template Library and implements 
Dynamic-link library (in-process COM server). 

<li> The building process of the GDAL-COM Dll is independent from 
the GDAL standard Dll, not imposing any changes to “nmake.opt”.

<li> The programming interface will be as close as possible to the 
original GDAL C++ API keeping method and parameter names, enumerators 
and structures, so that the documentation will refer to the original.

<li> Lucena will be responsible for support and implementation.

<li> Examples and test application will be provided in a few 
different programming languages.

</ol>

\section notes Notes

The GDAL-COM Interface exposes GDAL to every programming or 
scripting environment that support COM and because the .Net 
Framework can interface unmanaged COM libraries, the GDAL-COM 
Interface is also accessible through .NET programming environment.

\section usage Usage

The following pieces of code exemplify the use of GDAL-COM 
Interface:

\section delphi Delphi

\verbatim
Uses GDALLib_TLB;
Var
  Dataset : IDataset;
  Projection : string;
Begin
  Dataset := CoDataset.Create();
  try
    Dataset.Open('Ikonos1.tif', atReadOnly);
    (* Test Get/Set Projection string *)
    Projection := Dataset.GetProjectionRef();
    Dataset.SetProjection(lProjection);
  finally
    Dataset := nil;
  end;
End;
\endverbatim

\section csharp CSharp

\verbatim
using GDALLib;
{
  IDataset pDataset;
  IRasterBand pRasterBand;
  pDataset = new DatasetClass();
  pDataset.Open(”Ikonos1.tif”, atReadOnly);
  pRasterBand = pDataset.GetRasterBand(1);
  pDataset = null;
}
\endverbatim

\section pythonWin PythonWin

\verbatim
From GDALLib import *
pDataset = Dataset()
pDataset.Open(”Ikonos1.tif”, constants.atReadOnly)
pRasterband = pDataset.GetRasterBand(1)
pRataset = None
\endverbatim

Notes: The interface was generated automatically by “makepy.py” 
and it does not provide sufficient support to pointers and 
arrays in function arguments.

\section vb.net VB.NET

\verbatim
Imports GDALLib
Private Sub
  Dim pDataset As IDataset
  Dim pRasterBand As IRasterBand
  pDataset = New Dataset()
  pDataset.Open('Ikonos1.tif', AccessTypeEnum.atReadOnly)
  pRasterBand = pDataset.GetRasterBand(1)
  pRasterBand = Nothing
End Sub
\endverbatim

*/
 
